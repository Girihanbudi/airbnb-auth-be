// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	repoimpl2 "airbnb-auth-be/internal/app/account/repo/repoimpl"
	"airbnb-auth-be/internal/app/auth/api/rest"
	"airbnb-auth-be/internal/app/auth/usecase/usecaseimpl"
	"airbnb-auth-be/internal/app/translation/repo/repoimpl"
	"airbnb-auth-be/internal/pkg/env"
	"airbnb-auth-be/internal/pkg/env/tool"
	"airbnb-auth-be/internal/pkg/gorm"
	"airbnb-auth-be/internal/pkg/http/server"
	"airbnb-auth-be/internal/pkg/http/server/router"
	"airbnb-auth-be/internal/pkg/kafka"
	"airbnb-auth-be/internal/pkg/kafka/consumer"
	"airbnb-auth-be/internal/pkg/kafka/producer"
	router2 "airbnb-auth-be/internal/pkg/kafka/router"
	"airbnb-auth-be/internal/pkg/oauth/facebook"
	"airbnb-auth-be/internal/pkg/oauth/google"
	"airbnb-auth-be/internal/pkg/svcuser"
	"github.com/google/wire"
)

import (
	_ "airbnb-auth-be/docs"
)

// Injectors from wire.go:

func NewApp() (*App, error) {
	config := env.ProvideEnv()
	configConfig := tool.ExtractServerConfig(config)
	engine := router.NewRouter()
	options := server.Options{
		Config: configConfig,
		Router: engine,
	}
	serverServer := server.NewServer(options)
	config2 := tool.ExtractKafkaConsumerConfig(config)
	config3 := tool.ExtractKafkaConfig(config)
	config4 := tool.ExtractKafkaRouterConfig(config)
	routerOptions := router2.Options{
		Config: config4,
	}
	routerRouter := router2.NewRouter(routerOptions)
	kafkaOptions := kafka.Options{
		Config: config3,
		Router: routerRouter,
	}
	client := kafka.NewSaramaClient(kafkaOptions)
	consumerOptions := consumer.Options{
		Config: config2,
		Client: client,
		Router: routerRouter,
	}
	listener := consumer.NewEventListener(consumerOptions)
	producerOptions := producer.Options{
		Client: client,
	}
	producerProducer := producer.NewEventProducer(producerOptions)
	config5 := tool.ExtractServiceUserConfig(config)
	svcuserOptions := svcuser.Options{
		Config: config5,
	}
	svcuserClient := svcuser.NewClient(svcuserOptions)
	config6 := tool.ExtractDBConfig(config)
	gormOptions := gorm.Options{
		Config: config6,
	}
	gormEngine := gorm.NewORM(gormOptions)
	repoimplOptions := repoimpl.Options{
		Gorm: gormEngine,
	}
	repo := repoimpl.NewTranslationRepo(repoimplOptions)
	config7 := tool.ExtractOauthGoogleConfig(config)
	googleOptions := google.Options{
		Config: config7,
	}
	oauth := google.NewGoogleOauth(googleOptions)
	config8 := tool.ExtractOauthFacebookConfig(config)
	facebookOptions := facebook.Options{
		Config: config8,
	}
	facebookOauth := facebook.NewFacebookOauth(facebookOptions)
	options2 := repoimpl2.Options{
		Gorm: gormEngine,
	}
	repoimplRepo := repoimpl2.NewAccountRepo(options2)
	usecaseimplOptions := usecaseimpl.Options{
		GoogleOauth:   oauth,
		FacebookOauth: facebookOauth,
		AccountRepo:   repoimplRepo,
		EventProducer: producerProducer,
		SvcUser:       svcuserClient,
	}
	usecase := usecaseimpl.NewAuthUsecase(usecaseimplOptions)
	restOptions := rest.Options{
		Router: engine,
		Auth:   usecase,
	}
	handler := rest.NewAuthHandler(restOptions)
	appOptions := Options{
		HttpServer:    serverServer,
		EventListener: listener,
		EventProducer: producerProducer,
		SvcUser:       svcuserClient,
		Translation:   repo,
		AuthHandler:   handler,
	}
	app := &App{
		Options: appOptions,
	}
	return app, nil
}

// wire.go:

var AppSet = wire.NewSet(wire.Struct(new(Options), "*"), wire.Struct(new(App), "*"))
